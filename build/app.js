// Generated by CoffeeScript 2.3.1
(function() {
  var EventEmitter, SystemdManager, dbus, unitEvents;

  dbus = require('dbus-native');

  ({EventEmitter} = require('events'));

  
  // https://www.freedesktop.org/wiki/Software/systemd/dbus/

  unitEvents = ["UnitNew", "UnitRemoved", "JobNew", "JobRemoved", "StartupFinished"];

  SystemdManager = class SystemdManager extends EventEmitter {
    constructor({dbusSocket}) {
      var bus;
      super();
      this.serviceName = "org.freedesktop.systemd1";
      this.objectPath = "/org/freedesktop/systemd1";
      bus = dbus.systemBus({
        busAddress: `unix:path=${dbusSocket}`
      });
      if (!bus) {
        throw new Error('Could not connect to the DBus system bus.');
      }
      this.service = bus.getService(this.serviceName);
    }

    init(cb) {
      return this.service.getInterface(this.objectPath, `${this.serviceName}.Manager`, (error, manager) => {
        this.manager = manager;
        if (error) {
          cb(error);
        }
        unitEvents.forEach((event) => {
          return this.manager.on(event, (...things) => {
            var path, pid, serviceName, state;
            [pid, path, serviceName, state] = things;
            return this.emit(event, {pid, path, serviceName, state});
          });
        });
        return cb(null, this.manager);
      });
    }

  };

  module.exports = SystemdManager;

}).call(this);
